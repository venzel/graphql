package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"
	"graphql/graph/model"
)

func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.NewTransaction) (*model.Transaction, error) {
	transaction, err := r.TransactionDB.Create(input.Amount, input.AccountID)

	if err != nil {
		return nil, err
	}

	return &model.Transaction{
		ID:     transaction.ID,
		Amount: transaction.Amount,
	}, nil
}

func (r *mutationResolver) CreateAccount(ctx context.Context, input model.NewAccount) (*model.Account, error) {
	account, err := r.AccountDB.Create(input.Name, input.Email)

	if err != nil {
		return nil, err
	}

	return &model.Account{
		ID:    account.ID,
		Name:  account.Name,
		Email: account.Email,
	}, nil
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context) ([]*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: Transactions - transactions"))
}

func (r *queryResolver) Accounts(ctx context.Context) ([]*model.Account, error) {
	accounts, err := r.AccountDB.FindAll()

	if err != nil {
		return nil, err
	}

	var result []*model.Account

	for _, account := range accounts {
		result = append(result, &model.Account{
			ID:    account.ID,
			Name:  account.Name,
			Email: account.Email,
		})
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
